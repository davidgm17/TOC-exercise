/**
* TOC.js: create a table of contents for a document.
* 
* This module registers an anonymous function that runs automatically
* when the document finishes loading. When it runs, the function first
* looks for a document element with an id of "TOC". If there is no
* such element it creates one at the start of the document.
* 
* Next, the function finds all <h1> through <h6> tags, treats them as
* section titles, and creates a table of contents within the TOC
* element. The function adds section numbers to each section heading
* and wraps the headings in named anchors so that the TOC can link to
* them. The generated anchors have names that begin with "TOC", so
* you should avoid this prefix in your own HTML.15.7  Example: Generating a Table of Contents|387Client-SideJavaScript
* 
* The entries in the generated TOC can be styled with CSS. All entries have
* a class "TOCEntry". Entries also have a class that corresponds to the level
* of the section heading. <h1> tags generate entries of class "TOCLevel1", 
* <h2> tags generate entries of class "TOCLevel2", and so on. Section numbers
* inserted into headings have class "TOCSectNum".
*
* You might use this module with a stylesheet like this:
*
*/

#TOC {
	border: solid black 1px;
	width: 80%;
	max-width: 1300px;
	margin: 15px auto;
	padding: 10px;
}
.TOCEntry {
	font-family: sans-serif;
}
.TOCEntry a {
	text-decoration: none;
}
.TOCLevel1 {
	font-size: 16pt;
	font-weight: bold;
}
.TOCLevel2 {
	font-size: 12pt;
	margin-left: .5in;
}
.TOCLevel3 {
	font-size: 8pt;
	margin-left: 1in;
}
.TOCLevel4 {
	font-size: 8pt;
	margin-left: 1.5in;
}
.TOCSectNum:after {
	content: ": ";
}
/**
* That final line generates a colon and space after section numbers. To hide
* the section numbers, use this:
*/

.TOCSectNum {
	display: none;
}

/**
* This module requires the onLoad() utility function.
**/
